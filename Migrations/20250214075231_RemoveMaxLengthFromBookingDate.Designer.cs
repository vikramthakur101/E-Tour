// <auto-generated />
using System;
using E_Tour.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_Tour.Migrations
{
    [DbContext(typeof(EtourDbContext))]
    [Migration("20250214075231_RemoveMaxLengthFromBookingDate")]
    partial class RemoveMaxLengthFromBookingDate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("E_Tour.Models.Bookingheader", b =>
                {
                    b.Property<int>("bookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("bookingID");

                    b.Property<DateTime>("bookingDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("bookingDate");

                    b.Property<string>("bookingStatus")
                        .IsRequired()
                        .HasColumnType("enum('CANCELED','CONFIRMED','PENDING')")
                        .HasColumnName("bookingStatus");

                    b.Property<int>("customerId")
                        .HasColumnType("int")
                        .HasColumnName("customerId");

                    b.Property<string>("customername")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("customername");

                    b.Property<string>("email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<int?>("numberOfPassengers")
                        .HasColumnType("int")
                        .HasColumnName("numberOfPassengers");

                    b.Property<string>("paymentStatus")
                        .IsRequired()
                        .HasColumnType("enum('COMPLETED','FAILED','PENDING')")
                        .HasColumnName("paymentStatus");

                    b.Property<double>("totalAmount")
                        .HasColumnType("double")
                        .HasColumnName("totalAmount");

                    b.Property<double>("tourAmount")
                        .HasColumnType("double")
                        .HasColumnName("tourAmount");

                    b.Property<int>("tourId")
                        .HasColumnType("int")
                        .HasColumnName("tourId");

                    b.Property<string>("tourname")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("tourname");

                    b.Property<string>("transactionId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("transactionId");

                    b.HasKey("bookingId")
                        .HasName("PRIMARY");

                    b.ToTable("bookingheader");
                });

            modelBuilder.Entity("E_Tour.Models.Categorymaster", b =>
                {
                    b.Property<int>("Categoryid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("categoryid");

                    b.Property<string>("CategoryImagePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("categoryImagePath");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Category_Name");

                    b.Property<ulong>("Flag")
                        .HasColumnType("bit(1)");

                    b.Property<int>("Subcategoryid")
                        .HasColumnType("int")
                        .HasColumnName("subcategoryid");

                    b.HasKey("Categoryid")
                        .HasName("PRIMARY");

                    b.ToTable("categorymaster");
                });

            modelBuilder.Entity("E_Tour.Models.Costmaster", b =>
                {
                    b.Property<int>("CostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ChildWithBed")
                        .HasColumnType("int")
                        .HasColumnName("childWithBed");

                    b.Property<int>("ChildWitoutBed")
                        .HasColumnType("int")
                        .HasColumnName("childWitoutBed");

                    b.Property<int>("ExtraPersonCost")
                        .HasColumnType("int")
                        .HasColumnName("extraPersonCost");

                    b.Property<int?>("SinglePersonCost")
                        .HasColumnType("int")
                        .HasColumnName("singlePersonCost");

                    b.Property<int>("TourId")
                        .HasColumnType("int")
                        .HasColumnName("tourId");

                    b.Property<int>("TwinSharingcost")
                        .HasColumnType("int");

                    b.HasKey("CostId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TourId" }, "UK1qg4m2fi7wc915v9six8ivvn2")
                        .IsUnique();

                    b.ToTable("costmaster");
                });

            modelBuilder.Entity("E_Tour.Models.Customer", b =>
                {
                    b.Property<long>("Customerid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("customerid");

                    b.Property<string>("email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("firstName");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("lastName");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<long?>("phoneNumber1")
                        .HasColumnType("bigint")
                        .HasColumnName("phoneNumber1");

                    b.HasKey("Customerid")
                        .HasName("PRIMARY");

                    b.ToTable("customer");
                });

            modelBuilder.Entity("E_Tour.Models.Departuredate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Enddate")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("enddate");

                    b.Property<DateTime?>("Startdate")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("startdate");

                    b.Property<int>("TourId")
                        .HasColumnType("int")
                        .HasColumnName("tour_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TourId" }, "FKk3khu7tlq4njwvmkftfrkeuce");

                    b.ToTable("departuredates");
                });

            modelBuilder.Entity("E_Tour.Models.Itenarymaster", b =>
                {
                    b.Property<int>("ItenaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DayNo")
                        .HasColumnType("int")
                        .HasColumnName("dayNo");

                    b.Property<string>("DetailsEs")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("detailsEs");

                    b.Property<string>("DetailsFr")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("detailsFr");

                    b.Property<string>("DetailsHi")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("detailsHi");

                    b.Property<string>("DetailsMr")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("detailsMr");

                    b.Property<string>("Images")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("images");

                    b.Property<int>("TourId")
                        .HasColumnType("int")
                        .HasColumnName("tour_id");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("ItenaryId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TourId" }, "FK_tour_itenary");

                    b.ToTable("itenarymaster");
                });

            modelBuilder.Entity("E_Tour.Models.Passenger", b =>
                {
                    b.Property<int>("Paxid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Age")
                        .HasColumnType("int")
                        .HasColumnName("age");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<int?>("Cost")
                        .HasColumnType("int")
                        .HasColumnName("cost");

                    b.Property<long>("Customerid")
                        .HasColumnType("bigint")
                        .HasColumnName("customerid");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("firstName");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("lastName");

                    b.Property<string>("PassengerType")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("passengerType");

                    b.Property<long?>("PhoneNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("phoneNumber");

                    b.HasKey("Paxid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Customerid" }, "FK94glo3g96s4casn80nqs3ibdu");

                    b.ToTable("passenger");
                });

            modelBuilder.Entity("E_Tour.Models.Subcategorymaster", b =>
                {
                    b.Property<int>("SubCatMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("subCatMasterId");

                    b.Property<int>("CatMasterId")
                        .HasColumnType("int")
                        .HasColumnName("catMasterId");

                    b.Property<ulong>("Flag")
                        .HasColumnType("bit(1)")
                        .HasColumnName("flag");

                    b.Property<string>("SubCatId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("subCatId");

                    b.Property<string>("SubCatImagePath")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("subCatImagePath");

                    b.Property<string>("SubCatName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("subCatName");

                    b.HasKey("SubCatMasterId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CatMasterId" }, "FKdqaal5ktonkpbtrg032utwed1");

                    b.ToTable("subcategorymaster");
                });

            modelBuilder.Entity("E_Tour.Models.Tour", b =>
                {
                    b.Property<int>("Tourid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tourid");

                    b.Property<string>("DurationDays")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("durationDays");

                    b.Property<string>("DurationNights")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("durationNights");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("imageurl");

                    b.Property<string>("Place")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("place");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price");

                    b.Property<int>("SubcategoryMaster")
                        .HasColumnType("int")
                        .HasColumnName("subcategoryMaster");

                    b.Property<string>("TourName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("tourname");

                    b.HasKey("Tourid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "SubcategoryMaster" }, "FKqvmqy6h525rs33m9cqt2a3rri");

                    b.ToTable("tours");
                });

            modelBuilder.Entity("E_Tour.Models.Transactionsstatus", b =>
                {
                    b.Property<long>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("transactionId");

                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("bookingID");

                    b.Property<DateTime>("CreatedAt")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("createdAt");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("packageName");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("int")
                        .HasColumnName("totalAmount");

                    b.Property<int>("TourId")
                        .HasColumnType("int")
                        .HasColumnName("tourId");

                    b.Property<string>("TransactionStatus")
                        .IsRequired()
                        .HasColumnType("enum('COMPLETED','FAILED','PENDING')")
                        .HasColumnName("transactionStatus");

                    b.Property<DateTime>("UpdatedAt")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updatedAt");

                    b.HasKey("TransactionId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TourId" }, "FKrm93xk7265fy0xtaaf2jq185l");

                    b.HasIndex(new[] { "TotalAmount" }, "UKl406erm0b04fpeijxrap2tu93")
                        .IsUnique();

                    b.HasIndex(new[] { "BookingId" }, "UKs2i5dc1nhj0dbsdadsc1ku2s2")
                        .IsUnique();

                    b.ToTable("transactionsstatus");
                });

            modelBuilder.Entity("E_Tour.Models.Costmaster", b =>
                {
                    b.HasOne("E_Tour.Models.Tour", "Tour")
                        .WithOne("Costmaster")
                        .HasForeignKey("E_Tour.Models.Costmaster", "TourId")
                        .IsRequired()
                        .HasConstraintName("FK327r3j8n8q2o4jo4e0174mlbq");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("E_Tour.Models.Departuredate", b =>
                {
                    b.HasOne("E_Tour.Models.Tour", "Tour")
                        .WithMany("Departuredates")
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FKk3khu7tlq4njwvmkftfrkeuce");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("E_Tour.Models.Itenarymaster", b =>
                {
                    b.HasOne("E_Tour.Models.Tour", "Tour")
                        .WithMany("Itenarymasters")
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK_tour_itenary");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("E_Tour.Models.Passenger", b =>
                {
                    b.HasOne("E_Tour.Models.Customer", "Customer")
                        .WithMany("Passengers")
                        .HasForeignKey("Customerid")
                        .IsRequired()
                        .HasConstraintName("FK94glo3g96s4casn80nqs3ibdu");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("E_Tour.Models.Subcategorymaster", b =>
                {
                    b.HasOne("E_Tour.Models.Categorymaster", "CatMaster")
                        .WithMany("Subcategorymasters")
                        .HasForeignKey("CatMasterId")
                        .IsRequired()
                        .HasConstraintName("FKdqaal5ktonkpbtrg032utwed1");

                    b.Navigation("CatMaster");
                });

            modelBuilder.Entity("E_Tour.Models.Tour", b =>
                {
                    b.HasOne("E_Tour.Models.Subcategorymaster", "SubcategoryMasterNavigation")
                        .WithMany("Tours")
                        .HasForeignKey("SubcategoryMaster")
                        .IsRequired()
                        .HasConstraintName("FKqvmqy6h525rs33m9cqt2a3rri");

                    b.Navigation("SubcategoryMasterNavigation");
                });

            modelBuilder.Entity("E_Tour.Models.Transactionsstatus", b =>
                {
                    b.HasOne("E_Tour.Models.Bookingheader", "Booking")
                        .WithOne("transactionsstatus")
                        .HasForeignKey("E_Tour.Models.Transactionsstatus", "BookingId")
                        .IsRequired()
                        .HasConstraintName("FKjmq5o024vo6epjojp4fcf8dm0");

                    b.HasOne("E_Tour.Models.Costmaster", "TotalAmountNavigation")
                        .WithOne("Transactionsstatus")
                        .HasForeignKey("E_Tour.Models.Transactionsstatus", "TotalAmount")
                        .IsRequired()
                        .HasConstraintName("FKdk3alo9s6dc02mcefyj2gt79m");

                    b.HasOne("E_Tour.Models.Tour", "Tour")
                        .WithMany("Transactionsstatuses")
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FKrm93xk7265fy0xtaaf2jq185l");

                    b.Navigation("Booking");

                    b.Navigation("TotalAmountNavigation");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("E_Tour.Models.Bookingheader", b =>
                {
                    b.Navigation("transactionsstatus");
                });

            modelBuilder.Entity("E_Tour.Models.Categorymaster", b =>
                {
                    b.Navigation("Subcategorymasters");
                });

            modelBuilder.Entity("E_Tour.Models.Costmaster", b =>
                {
                    b.Navigation("Transactionsstatus");
                });

            modelBuilder.Entity("E_Tour.Models.Customer", b =>
                {
                    b.Navigation("Passengers");
                });

            modelBuilder.Entity("E_Tour.Models.Subcategorymaster", b =>
                {
                    b.Navigation("Tours");
                });

            modelBuilder.Entity("E_Tour.Models.Tour", b =>
                {
                    b.Navigation("Costmaster");

                    b.Navigation("Departuredates");

                    b.Navigation("Itenarymasters");

                    b.Navigation("Transactionsstatuses");
                });
#pragma warning restore 612, 618
        }
    }
}
